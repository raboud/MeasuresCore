// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RandREng.MeasuresCore.Data;

namespace RandREng.MeasureCore.Data.Migrations
{
    [DbContext(typeof(MeasureContext))]
    [Migration("20190321190433_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview3.19153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ActionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionRequired");

                    b.Property<string>("Cause");

                    b.Property<bool?>("Closed");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("EnteredBy");

                    b.Property<int?>("InstallerError");

                    b.Property<string>("InstallerErrorText");

                    b.Property<int?>("LastEditedBy");

                    b.Property<DateTime?>("LastEditedDate");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MeasureError");

                    b.Property<string>("MeasureErrorText");

                    b.Property<int?>("MillError");

                    b.Property<string>("MillErrorText");

                    b.Property<string>("Nature");

                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("ReportDate");

                    b.Property<int?>("StoreError");

                    b.Property<string>("StoreErrorText");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ActionReport");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Admin", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("EmployeeId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConfirmationToken");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsConfirmed");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ResetPasswordToken");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Insurance")
                        .HasColumnType("Money");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("OwnerId");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("PayDay");

                    b.Property<string>("QBTxnId");

                    b.Property<decimal>("Retainage")
                        .HasColumnType("Money");

                    b.Property<int>("SubContractorId");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("SubContractorId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackChargeOwnerId");

                    b.Property<int>("BillId");

                    b.Property<int?>("ChargeBackId");

                    b.Property<int>("ClassificationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<bool>("NoRetainage");

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<string>("QBUid");

                    b.Property<int?>("SubContractorId");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ChargeBackId");

                    b.HasIndex("SubContractorId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("LabelPrinter");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("ManagerId");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PrinterDriver");

                    b.Property<string>("PrinterName");

                    b.Property<string>("PrinterPort");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<bool>("MarkBilledWhenPaid");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<bool>("PrintStatusReport");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ChargeBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<decimal>("AmountToSub")
                        .HasColumnType("Money");

                    b.Property<int>("ApprovalNumber");

                    b.Property<bool>("Approved");

                    b.Property<bool?>("CostAdjustment");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("IssueDate");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("OrderId");

                    b.Property<string>("OriginalPO");

                    b.Property<string>("Reason");

                    b.Property<int>("SubcontractorId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ChargeBacks");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("CheckDate");

                    b.Property<string>("CheckNumber");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("QBTxnId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CheckCBDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("ChargeBackId");

                    b.Property<int>("CheckId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.HasIndex("ChargeBackId");

                    b.HasIndex("CheckId");

                    b.ToTable("CheckCBDetails");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CheckDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("CheckId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("OrderId");

                    b.ToTable("CheckDetails");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Directions");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Extension");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDateTime");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("ISnull(CompanyName, LastName + ', ' + FirstName)");

                    b.Property<int?>("ParentId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("QBCustomerId");

                    b.Property<string>("WorkNumber");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ClientTypeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientTypeId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Location");

                    b.Property<int>("ReportTypeId");

                    b.Property<int?>("StoreTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("ClientTypeReports");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Fax1");

                    b.Property<string>("Fax2");

                    b.Property<DateTime>("LastModified");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("QRCodePrefix");

                    b.Property<string>("State");

                    b.Property<string>("TollFree");

                    b.Property<string>("VendorNumber");

                    b.Property<byte[]>("WaiverSignature");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfoes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName");

                    b.Property<bool>("Primary");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("ImageName");

                    b.Property<DateTime>("LastModified");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("QBClass");

                    b.HasKey("Id");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.DaysOfYear", b =>
                {
                    b.Property<DateTime>("DateValue");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("DateValue");

                    b.ToTable("DaysOfYears");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Discrepancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CurrentData");

                    b.Property<DateTime>("DateFound");

                    b.Property<DateTime?>("DateReviewed");

                    b.Property<int?>("DetailId");

                    b.Property<int?>("DiscrepancySubTypeId");

                    b.Property<int?>("DiscrepancyTypeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("NewData");

                    b.Property<int?>("OrderId");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<string>("XMLFilePath");

                    b.HasKey("Id");

                    b.HasIndex("DiscrepancyTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Discrepancy");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.DiscrepancyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("DiscrepancyType");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("OrderSOMerchandiseDetailId");

                    b.Property<string>("PathAndFilename");

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderSOMerchandiseDetailId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.DocumentOrder", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("DocumentId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("OrderId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentOrder");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("EmailTypeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EmailTypeId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("EmailTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("HireDate");

                    b.Property<string>("HomeNumber");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("NickName");

                    b.Property<string>("PagerNumber");

                    b.Property<bool>("ReceiveCallNotes");

                    b.Property<string>("SMTPEmail");

                    b.Property<string>("SSN");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.EntryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("EntryMethods");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.InstallationCrew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BranchId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CrewName");

                    b.Property<bool>("InstallationManager");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("LeadId");

                    b.Property<int?>("MarketId");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("MarketId");

                    b.HasIndex("OwnerId");

                    b.ToTable("InstallationCrew");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.InstallationCrewType", b =>
                {
                    b.Property<int>("InstallationCrewId");

                    b.Property<int>("JobTypeId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MaxSizeId");

                    b.Property<double?>("Rating");

                    b.HasKey("InstallationCrewId", "JobTypeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("InstallationCrewType");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("ApplyToMinimumWO");

                    b.Property<bool>("ApplyToMinimun");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("JobSize");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("ParentId");

                    b.Property<bool?>("PrintOnInvoice");

                    b.Property<bool>("PrintOnWO");

                    b.Property<int>("ProgramId");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("Size");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("Money");

                    b.Property<int?>("UnitOfMeasureId");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("Money");

                    b.Property<string>("WorkOrderDescription");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemCosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MarketId");

                    b.ToTable("ItemCostings");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemMatCosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MarketId");

                    b.ToTable("ItemMatCostings");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MarketId");

                    b.ToTable("ItemPricings");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemRetailPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("ItemI");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemRetailPricing");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("JobStatusDescription");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("JobStatus");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlwaysSkipInitialCall");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Market", b =>
                {
                    b.Property<int>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("ManagerId");

                    b.Property<string>("MarketName");

                    b.Property<string>("PrinterDriver");

                    b.Property<string>("PrinterName");

                    b.Property<string>("PrinterPort");

                    b.HasKey("MarketId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MatSubCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("MatSubCat");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialCatagory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Color");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("Furnish");

                    b.Property<bool>("IsPadding");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Manufacturer");

                    b.Property<int?>("MatSubCatId");

                    b.Property<string>("SKU");

                    b.Property<string>("Style");

                    b.Property<int?>("SubCatId");

                    b.Property<int>("UnitOfMeasureId");

                    b.Property<int?>("YardsPerRoll");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MatSubCatId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("MaterialCatagory");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.Property<int>("MaterialCatId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("MaterialCatId");

                    b.ToTable("MaterialCost");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.Property<int>("MaterialCatId");

                    b.Property<int?>("Material_CatagoryId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("Material_CatagoryId");

                    b.ToTable("MaterialPrice");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Billable");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Installable");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("MaterialStatus");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("Enterred");

                    b.Property<string>("EnterredById");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("SpecialInstructions");

                    b.Property<int>("Status");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EnterredById");

                    b.HasIndex("StoreId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureCustomerStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<int?>("BranchId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Enterred");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MeasureId");

                    b.Property<string>("Name");

                    b.Property<int?>("Status");

                    b.Property<int?>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("MeasureCustomerStores");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("EmailTemplateId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MeasureId");

                    b.Property<DateTime>("Sent");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureEmails");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AltWidthId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("MeasureId");

                    b.Property<double?>("PatternMatchLength");

                    b.Property<double?>("PatternMatchWidth");

                    b.Property<int?>("WidthId");

                    b.HasKey("Id");

                    b.HasIndex("AltWidthId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("WidthId");

                    b.ToTable("MeasureMaterials");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IncludeCloset");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MaterialId");

                    b.Property<int?>("MeasureMaterialId");

                    b.Property<string>("Name");

                    b.Property<int>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("MeasureMaterialId");

                    b.HasIndex("RoomId");

                    b.ToTable("MeasureRooms");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSendToExpeditor");

                    b.Property<DateTime>("Created");

                    b.Property<byte?>("DisplayOrder");

                    b.Property<bool>("EnableSchedulingInfo");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("NoteTypeDescription");

                    b.Property<bool>("PermissionRequiredToSelect");

                    b.Property<bool>("RequireSpokeWith");

                    b.Property<bool>("ShowEmployees");

                    b.Property<bool>("ShowInList");

                    b.Property<bool>("ShowSpokeWith");

                    b.Property<bool>("ShowStoreManagement");

                    b.HasKey("Id");

                    b.ToTable("NoteTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToId");

                    b.Property<bool>("Billed");

                    b.Property<decimal>("BilledAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("BilledDate");

                    b.Property<bool>("Called");

                    b.Property<bool>("Cancelled");

                    b.Property<string>("CorrelationId");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("CreatedDateTime");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerOrderNumber");

                    b.Property<bool>("CustomerToCall");

                    b.Property<DateTime?>("DateEntered");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DrawingDate");

                    b.Property<string>("DrawingNumber");

                    b.Property<int?>("EnteredById");

                    b.Property<int>("EntryMethodId");

                    b.Property<bool>("Estimate");

                    b.Property<string>("FollowUpAction");

                    b.Property<DateTime?>("FollowUpDate");

                    b.Property<string>("InternalNotes");

                    b.Property<bool>("Invoice");

                    b.Property<int?>("JobId");

                    b.Property<double?>("JobSize");

                    b.Property<int?>("JobStatusId");

                    b.Property<DateTime?>("KeyRecDate");

                    b.Property<string>("KeyRecNumber");

                    b.Property<DateTime>("LastModified");

                    b.Property<DateTime?>("LastModifiedDateTime");

                    b.Property<int?>("MarkDown");

                    b.Property<string>("NUMBER");

                    b.Property<bool>("NoMinimum");

                    b.Property<string>("Notes");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNo");

                    b.Property<string>("OriginalPO");

                    b.Property<bool>("Paid");

                    b.Property<int?>("PrimaryOrderId");

                    b.Property<int>("ProgramId");

                    b.Property<string>("PurchaseOrderNumber");

                    b.Property<decimal>("RetailAmount")
                        .HasColumnType("Money");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<string>("SPNNotes");

                    b.Property<int?>("SalesPersonId");

                    b.Property<DateTime?>("ScheduleEndDate");

                    b.Property<DateTime?>("ScheduleStartDate")
                        .HasColumnType("Date");

                    b.Property<bool>("Scheduled");

                    b.Property<bool>("ScheduledAM");

                    b.Property<int?>("ServiceLineNo");

                    b.Property<bool>("SevenDay");

                    b.Property<int>("StoreId");

                    b.Property<DateTime?>("SvcCompleteSentDate");

                    b.Property<decimal>("TripCharge")
                        .HasColumnType("Money");

                    b.Property<int?>("VendorId");

                    b.Property<bool>("Warrenty");

                    b.Property<int>("XMLOrderCostAmount");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("PrimaryOrderId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomItemNumber");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeId");

                    b.Property<int>("EntryMethodId");

                    b.Property<decimal>("ExtendedCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime>("LastModified");

                    b.Property<bool?>("NotOnInvoice");

                    b.Property<bool?>("NotOnWorkOrder");

                    b.Property<int>("OrderId");

                    b.Property<bool>("PrintOnInvoice");

                    b.Property<bool>("PrintOnWorkOrder");

                    b.Property<double>("Quanity");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int?>("SubContractorId");

                    b.Property<bool?>("SubContractorPaid");

                    b.Property<double?>("SubContractorPay");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("Money");

                    b.Property<int?>("UnitOfMeasureId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubContractorId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderCustoms");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderDiagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("DiagramDateTime");

                    b.Property<string>("DiagramFileName");

                    b.Property<string>("DiagramNumber");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDiagram");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Deleted");

                    b.Property<int>("EntryMethodId");

                    b.Property<decimal>("ExtendedCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("Money");

                    b.Property<double>("InstallQuantity");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("Money");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<int>("OrderId");

                    b.Property<bool>("PrintOnInvoice");

                    b.Property<bool>("PrintOnWO");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int?>("ServiceLineNumber");

                    b.Property<int?>("SubContractorId");

                    b.Property<bool?>("SubContractorPaid");

                    b.Property<decimal?>("SubContractorPay")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("UnitRetail")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("CustomerToCallBack");

                    b.Property<DateTime>("DateTimeEntered");

                    b.Property<DateTime?>("DateTimeSent");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("EnteredById");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("NoteText");

                    b.Property<int>("NoteTypeId");

                    b.Property<int>("OrderId");

                    b.Property<bool>("Scheduled");

                    b.Property<bool?>("ScheduledAM");

                    b.Property<DateTime?>("ScheduledDate");

                    b.Property<bool>("SentViaXML");

                    b.Property<int>("SpokeWithId");

                    b.Property<bool>("UnScheduled");

                    b.HasKey("Id");

                    b.HasIndex("EnteredById");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNotes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Deleted");

                    b.Property<int>("EntryMethodId");

                    b.Property<decimal>("ExtendedCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("Money");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("Money");

                    b.Property<int>("OrderId");

                    b.Property<bool>("PrintOnInvoice");

                    b.Property<bool>("PrintOnWO");

                    b.Property<double>("Quantity");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int?>("SubContractorId");

                    b.Property<bool?>("SubContractorPaid");

                    b.Property<decimal?>("SubContractorPay")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("UnitRetail")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("OrderOption");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderRegMerchandiseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeId");

                    b.Property<int>("EntryMethodId");

                    b.Property<int?>("HDLineNumber");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("Material_StatusId");

                    b.Property<string>("Notes");

                    b.Property<int>("OrderId");

                    b.Property<int?>("OriginalOrderId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("Money");

                    b.Property<double?>("Quantity");

                    b.Property<decimal?>("Retail")
                        .HasColumnType("Money");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<string>("SKUNumber");

                    b.Property<string>("ShortDescription");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("TransferredFrom");

                    b.Property<int?>("TransferredTo");

                    b.Property<int?>("UnitOfMeasureId");

                    b.Property<int?>("XMLStatusId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("Material_StatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderRegMerchandiseDetail");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderSOMerchandiseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("EntryMethodId");

                    b.Property<DateTime?>("ExpectedArrivalDate");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<bool>("NotNeeded");

                    b.Property<int>("OrderId");

                    b.Property<int?>("OriginalId");

                    b.Property<int?>("OriginalOrderId");

                    b.Property<double?>("PreSplitQty");

                    b.Property<double?>("Quantity");

                    b.Property<DateTime?>("Received");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<string>("SKUNumber");

                    b.Property<int?>("SOLineNumber");

                    b.Property<int?>("SOMerLineNumber");

                    b.Property<string>("SONumber");

                    b.Property<string>("ShortDescription");

                    b.Property<int?>("TransferredFrom");

                    b.Property<int?>("TransferredTo");

                    b.Property<int?>("UOMId");

                    b.Property<int?>("UnitOfMeasureId");

                    b.Property<int?>("WillCallLineNumber");

                    b.Property<int?>("XMLStatusId");

                    b.HasKey("Id");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderSOMerchandiseDetail");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.POPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateTimeEntered");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("EnteredByUserId");

                    b.Property<string>("FilePath");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("OrderId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("POPhotos");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("PermissionName");

                    b.Property<int>("PermissionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PermissionType");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Number");

                    b.Property<int>("PhoneNumberTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumberClient", b =>
                {
                    b.Property<int>("PhoneNumberId");

                    b.Property<int>("ClientId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("PhoneNumberId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("PhoneNumberClient");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumberContact", b =>
                {
                    b.Property<int>("PhoneNumberId");

                    b.Property<int>("ContactId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("PhoneNumberId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumberContact");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumberTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<bool>("AllowMaterialStatusUpdate");

                    b.Property<int?>("BusinesUnitId");

                    b.Property<int?>("BusinessUnitId");

                    b.Property<double?>("CostMultiplier");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("CustomCostByRetail");

                    b.Property<double?>("CustomMultiplier");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<bool>("Furnish");

                    b.Property<string>("HDType");

                    b.Property<bool>("InsuranceReplacement");

                    b.Property<int?>("JobTypeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarkDown");

                    b.Property<int?>("MarkDownMax");

                    b.Property<int?>("MarkDownMin");

                    b.Property<string>("MaterialTypeName");

                    b.Property<decimal?>("MinimumCost")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MinimumPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MinimumRetail")
                        .HasColumnType("Money");

                    b.Property<bool?>("OnlyBasicToMinimum");

                    b.Property<string>("SKU");

                    b.Property<string>("SKUDesc");

                    b.Property<string>("ShortName");

                    b.Property<double?>("TripChargeMultiplier");

                    b.Property<bool?>("Valid");

                    b.Property<bool>("WoodWaiver");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ProgramReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<int>("ProgramId");

                    b.Property<int>("ReportTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("ProgramReport");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Class");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<bool>("ShowCloset");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MeasureId");

                    b.Property<int>("SlotTypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("SlotTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.SlotType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SlotTypes");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUserId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MarketId");

                    b.Property<string>("Name");

                    b.Property<int?>("TechId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MarketId");

                    b.HasIndex("TechId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.SubContractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedTo");

                    b.Property<bool>("BackgroundCheckPassed");

                    b.Property<DateTime?>("BackgroundChkDateApproved");

                    b.Property<bool>("BackgroundRptRequested");

                    b.Property<string>("BadgeStatus");

                    b.Property<string>("CellPhoneNumber");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName");

                    b.Property<bool>("Helper");

                    b.Property<string>("HomePhoneNumber");

                    b.Property<decimal>("InsuranceDollarAmount")
                        .HasColumnType("Money");

                    b.Property<double>("InsuranceRate");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LiabilityInsuranceDate")
                        .HasColumnType("Date");

                    b.Property<bool?>("LiabilityInsuranceOK");

                    b.Property<int?>("MarketId");

                    b.Property<string>("NickName");

                    b.Property<string>("Notes");

                    b.Property<string>("Pager");

                    b.Property<string>("PictureFilename");

                    b.Property<string>("QBSubContractorId");

                    b.Property<decimal?>("Retainage")
                        .HasColumnType("Money");

                    b.Property<decimal?>("RetainageRate")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SSN");

                    b.Property<decimal?>("SavingsRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StateId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("WorkmansCompInsuranceDate")
                        .HasColumnType("Date");

                    b.Property<bool?>("WorkmansCompInsuranceOK");

                    b.HasKey("Id");

                    b.ToTable("SubContractors");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Tech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDateTime");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("Teches");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.TechCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Capacity");

                    b.Property<DateTime>("Created");

                    b.Property<byte>("DayOfWeek");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("SlotTypeId");

                    b.Property<string>("TechId");

                    b.Property<int?>("TechId1");

                    b.HasKey("Id");

                    b.HasIndex("SlotTypeId");

                    b.HasIndex("TechId1");

                    b.ToTable("TechCapacities");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int>("Divisor");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LongDescription");

                    b.Property<string>("LongDescriptionSOSI");

                    b.Property<int?>("NumberOfDecimals");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserMarketDivisionAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessUnitId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("ManagerId");

                    b.Property<int>("MarketId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MarketId");

                    b.ToTable("UserMarketDivisionAssignment");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessUnitId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MarketId");

                    b.Property<int>("PermissionId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MarketId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedDate");

                    b.Property<int?>("AssignedToId");

                    b.Property<int?>("CompletedById");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DueDate");

                    b.Property<int?>("JobId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("OrderId");

                    b.Property<int>("UserTaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CompletedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserTaskTypeId");

                    b.ToTable("UserTask");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("Priority");

                    b.HasKey("Id");

                    b.ToTable("UserTaskType");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.VOC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("After_Sales_Svc_Overall");

                    b.Property<short?>("Class_Nbr");

                    b.Property<short?>("Communication_Overall");

                    b.Property<short?>("Complete_Within_Timeframe");

                    b.Property<short?>("Correct_Project");

                    b.Property<DateTime>("Created");

                    b.Property<short?>("Department_Nbr");

                    b.Property<string>("Division_Name");

                    b.Property<string>("Final_Comments");

                    b.Property<string>("General_Comment");

                    b.Property<short?>("Installer_Appearance");

                    b.Property<float?>("Installer_Attributes_Aggregated");

                    b.Property<short?>("Installer_Care");

                    b.Property<short?>("Installer_Cleanup");

                    b.Property<short?>("Installer_Complete_On_Time");

                    b.Property<short?>("Installer_Courtesy");

                    b.Property<short?>("Installer_Informing");

                    b.Property<short?>("Installer_On_Time");

                    b.Property<string>("Installer_Other_Comments");

                    b.Property<short?>("Installer_Overall");

                    b.Property<short?>("Installer_Review_Project");

                    b.Property<short?>("Intrvw_Fiscal_Month");

                    b.Property<short?>("Intrvw_Fiscal_Quarter");

                    b.Property<short?>("Intrvw_Fiscal_Week");

                    b.Property<short?>("Intrvw_Fiscal_Year");

                    b.Property<short?>("Issue_Communication");

                    b.Property<short?>("Issue_Completion_Time");

                    b.Property<short?>("Issue_Customer_Service");

                    b.Property<short?>("Issue_Damaged_Product");

                    b.Property<short?>("Issue_Handling_Overall");

                    b.Property<short?>("Issue_Incorrect_Measurement");

                    b.Property<short?>("Issue_Installer_Professionalism");

                    b.Property<short?>("Issue_Material_Quality");

                    b.Property<short?>("Issue_Occurred");

                    b.Property<string>("Issue_Other");

                    b.Property<short?>("Issue_Property_Damage");

                    b.Property<short?>("Issue_Resolved");

                    b.Property<short?>("Issue_Store_Support");

                    b.Property<short?>("Issue_Workmanship");

                    b.Property<DateTime?>("Key_Rec_Date");

                    b.Property<DateTime>("LastModified");

                    b.Property<short?>("Loyalty");

                    b.Property<string>("Market_Name");

                    b.Property<short?>("Market_Nbr");

                    b.Property<short?>("Measure_Consult_Overall");

                    b.Property<string>("Mvendor_Name");

                    b.Property<int?>("Mvendor_Nbr");

                    b.Property<int?>("OrderId");

                    b.Property<short?>("Overall_Sat");

                    b.Property<int?>("PO_Nbr");

                    b.Property<short?>("Product_Overall");

                    b.Property<short?>("Project_Code");

                    b.Property<string>("Project_Name");

                    b.Property<string>("Pvendor_Name");

                    b.Property<short?>("Pvendor_Nbr");

                    b.Property<long?>("Reference_Nbr");

                    b.Property<short?>("Referral");

                    b.Property<string>("Region_Name");

                    b.Property<int?>("SKU");

                    b.Property<short?>("Shopping_Overall");

                    b.Property<short?>("Store_Nbr");

                    b.Property<short?>("Subclass_Nbr");

                    b.Property<DateTime?>("Survey_Date");

                    b.Property<short?>("Value_Overall");

                    b.Property<short?>("Workmanship_Overall");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("VOC");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Week", b =>
                {
                    b.Property<int>("Weeks")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Weeks");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Width", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("MaterialTypeId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Widths");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cancel");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CrewId");

                    b.Property<int?>("InstallationCrewId");

                    b.Property<int?>("JobId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("OrderId");

                    b.Property<DateTime>("ScheduleEndDate");

                    b.Property<DateTime>("ScheduleStartDate");

                    b.Property<bool>("ScheduledAM");

                    b.HasKey("Id");

                    b.HasIndex("InstallationCrewId");

                    b.HasIndex("OrderId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.WorkOrderEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("EmailType");

                    b.Property<DateTime>("LastModified");

                    b.Property<DateTime>("Sent");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderEmail");
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ActionReport", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("ActionReports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Admin", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithOne("Admin")
                        .HasForeignKey("RandREng.MeasuresCore.Domain.Admin", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.AspNetUser", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Bill", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.SubContractor", "SubContractor")
                        .WithMany("Bills")
                        .HasForeignKey("SubContractorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.BillDetail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.ChargeBack", "ChargeBack")
                        .WithMany("BillDetails")
                        .HasForeignKey("ChargeBackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.SubContractor", "SubContractor")
                        .WithMany("BillDetails")
                        .HasForeignKey("SubContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.WorkOrder", "WorkOrder")
                        .WithMany("BillDetails")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Branch", b =>
                {
                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.BusinessUnit", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "Parent")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ChargeBack", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("ChargeBacks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CheckCBDetail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.ChargeBack", "ChargeBack")
                        .WithMany("CheckCBDetails")
                        .HasForeignKey("ChargeBackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Check", "Check")
                        .WithMany("CheckCBDetails")
                        .HasForeignKey("CheckId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CheckDetail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Check", "Check")
                        .WithMany("CheckDetails")
                        .HasForeignKey("CheckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("CheckDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Client", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Client", "Parent")
                        .WithMany("Clients")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("ClientId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("ClientId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ClientTypeReport", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.ReportType", "ReportType")
                        .WithMany("ClientTypeReports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.CustomerType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.CompanyInfo", b =>
                {
                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CompanyInfoId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("CompanyInfoId");

                            b1.ToTable("CompanyInfoes");

                            b1.WithOwner()
                                .HasForeignKey("CompanyInfoId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Discrepancy", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.DiscrepancyType", "DiscrepancyType")
                        .WithMany("Discrepancies")
                        .HasForeignKey("DiscrepancyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("Discrepancies")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "ReviewedBy")
                        .WithMany("Discrepancies")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Document", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.OrderSOMerchandiseDetail")
                        .WithMany("Documents")
                        .HasForeignKey("OrderSOMerchandiseDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.WorkOrder")
                        .WithMany("Documents")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.DocumentOrder", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Document", "Document")
                        .WithMany("OrdersDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("OrdersDocuments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.EmailTemplate", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.EmailType")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Employee", b =>
                {
                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.InstallationCrew", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.SubContractor", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.SubContractor", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.InstallationCrewType", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.InstallationCrew", "InstallationCrew")
                        .WithMany("InstallationCrewType")
                        .HasForeignKey("InstallationCrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.JobType", "JobType")
                        .WithMany("InstallationCrewType")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Item", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Parent")
                        .WithMany("SubItems")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemCosting", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Item")
                        .WithMany("ItemCosts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("ItemCostings")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "Cost", b1 =>
                        {
                            b1.Property<int>("ItemCostingId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("ItemCostingId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("ItemCostings");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("ItemCostingId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemMatCosting", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Item")
                        .WithMany("ItemMatCosts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("ItemMatCostings")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "MatCost", b1 =>
                        {
                            b1.Property<int>("ItemMatCostingId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("ItemMatCostingId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("ItemMatCostings");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("ItemMatCostingId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemPricing", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Item")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("ItemPricings")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "Price", b1 =>
                        {
                            b1.Property<int>("ItemPricingId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("ItemPricingId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("ItemPricings");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("ItemPricingId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ItemRetailPricing", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Item")
                        .WithMany("ItemRetailPrices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "Retail", b1 =>
                        {
                            b1.Property<int>("ItemRetailPricingId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("ItemRetailPricingId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("ItemRetailPricing");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("ItemRetailPricingId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Market", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithMany("Markets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialCatagory", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Item")
                        .WithMany("MaterialCatagories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MatSubCat", "MatSubCat")
                        .WithMany("MaterialCatagory")
                        .HasForeignKey("MatSubCatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialCost", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("MaterialCosts")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MaterialCatagory", "MaterialCat")
                        .WithMany("MaterialCosts")
                        .HasForeignKey("MaterialCatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "Cost", b1 =>
                        {
                            b1.Property<int>("MaterialCostId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("MaterialCostId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("MaterialCost");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("MaterialCostId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MaterialPrice", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("MaterialPrices")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MaterialCatagory", "Material_Catagory")
                        .WithMany("MaterialPrices")
                        .HasForeignKey("Material_CatagoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Pricing", "Price", b1 =>
                        {
                            b1.Property<int>("MaterialPriceId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("Money");

                            b1.Property<int?>("BusinessUnitId");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("Date");

                            b1.Property<decimal?>("Freight")
                                .HasColumnType("Money");

                            b1.Property<int?>("MarketId");

                            b1.Property<double?>("SalesTax");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date");

                            b1.Property<int?>("StoreId");

                            b1.HasKey("MaterialPriceId");

                            b1.HasIndex("BusinessUnitId");

                            b1.HasIndex("MarketId");

                            b1.HasIndex("StoreId");

                            b1.ToTable("MaterialPrice");

                            b1.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                                .WithMany()
                                .HasForeignKey("BusinessUnitId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                                .WithMany()
                                .HasForeignKey("MarketId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("MaterialPriceId");

                            b1.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                                .WithMany()
                                .HasForeignKey("StoreId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Measure", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Client", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.AspNetUser", "EnterredBy")
                        .WithMany()
                        .HasForeignKey("EnterredById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureCustomerStore", b =>
                {
                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("MeasureCustomerStoreId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("MeasureCustomerStoreId");

                            b1.ToTable("MeasureCustomerStores");

                            b1.WithOwner()
                                .HasForeignKey("MeasureCustomerStoreId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureEmail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Measure", "Measure")
                        .WithMany("Emails")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureMaterial", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Width", "AltWidth")
                        .WithMany()
                        .HasForeignKey("AltWidthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Program", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Measure")
                        .WithMany("Materials")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Width", "Width")
                        .WithMany()
                        .HasForeignKey("WidthId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.MeasureRoom", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.MeasureMaterial")
                        .WithMany("Rooms")
                        .HasForeignKey("MeasureMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Order", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "AssignedTo")
                        .WithMany("AssignedOrders")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "CreatedBy")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Client", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.JobStatus")
                        .WithMany("Orders")
                        .HasForeignKey("JobStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "PrimaryOrder")
                        .WithMany("Orders")
                        .HasForeignKey("PrimaryOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "ReviewedBy")
                        .WithMany("ReviewedOrders")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "SalesPerson")
                        .WithMany("SalesOrders")
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderCustom", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.SubContractor", "SubContractor")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("SubContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderDiagram", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("OrderDiagrams")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderItems", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MaterialStatus", "MaterialStatus")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("MaterialStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "ReviewedBy")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderNote", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "EnteredBy")
                        .WithMany("PONotes")
                        .HasForeignKey("EnteredById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.NoteType", "NoteType")
                        .WithMany("PONotes")
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("PONotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderOption", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("Order_Options_Details")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Item", "Option")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "ReviewedBy")
                        .WithMany("Order_Options_Details")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderRegMerchandiseDetail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MaterialStatus", "Material_Status")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("Material_StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.OrderSOMerchandiseDetail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderSOMerchandiseDetails")
                        .HasForeignKey("EntryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.MaterialStatus", "Material_Status")
                        .WithMany("OrderSOMerchandiseDetails")
                        .HasForeignKey("MaterialStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("OrderSOMerchandiseDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "ReviewedBy")
                        .WithMany("OrderSOMerchandiseDetails")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.POPhoto", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("POPhotos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Permission", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumber", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.PhoneNumberType", "PhoneNumberType")
                        .WithMany()
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumberClient", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.PhoneNumberContact", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Program", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.JobType")
                        .WithMany("Programs")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.ProgramReport", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.ReportType", "ReportType")
                        .WithMany("ProgramReports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Slot", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Measure", "Measure")
                        .WithMany("Slots")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.SlotType", "SlotType")
                        .WithMany("Slots")
                        .HasForeignKey("SlotTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.AspNetUser", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Store", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.AspNetUser")
                        .WithMany("Stores")
                        .HasForeignKey("AspNetUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.CustomerType")
                        .WithMany("Stores")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee")
                        .WithMany("Stores")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market")
                        .WithMany("Stores")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Tech")
                        .WithMany("Stores")
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("StoreId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("StoreId");

                            b1.ToTable("Store");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");
                        });

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("StoreId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("StoreId");

                            b1.ToTable("Store");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.SubContractor", b =>
                {
                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("SubContractorId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("SubContractorId");

                            b1.ToTable("SubContractors");

                            b1.WithOwner()
                                .HasForeignKey("SubContractorId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.Tech", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.AspNetUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RandREng.MeasuresCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TechId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("City");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("State");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("TechId");

                            b1.ToTable("Teches");

                            b1.WithOwner()
                                .HasForeignKey("TechId");
                        });
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.TechCapacity", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.SlotType", "SlotType")
                        .WithMany("TechCapacities")
                        .HasForeignKey("SlotTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Tech", "Tech")
                        .WithMany("Capacities")
                        .HasForeignKey("TechId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserMarketDivisionAssignment", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Manager")
                        .WithMany("UserMarketDivisionAssignments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserPermission", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "Employee")
                        .WithMany("UserPermissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.UserTask", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "AddedBy")
                        .WithMany("AddedTasks")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "AssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Employee", "CompletedBy")
                        .WithMany("CompletedTasks")
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("UserTasks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.UserTaskType", "UserTaskType")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserTaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.VOC", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("VOCs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.WorkOrder", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.InstallationCrew", "InstallationCrew")
                        .WithMany("WorkOrders")
                        .HasForeignKey("InstallationCrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RandREng.MeasuresCore.Domain.Order", "Order")
                        .WithMany("WorkOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RandREng.MeasuresCore.Domain.WorkOrderEmail", b =>
                {
                    b.HasOne("RandREng.MeasuresCore.Domain.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderEmails")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
